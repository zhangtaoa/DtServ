#coding=gbk

import sys
import os
import time
import socket
import multiprocessing
import logging
from multiprocessing import Pool

from mako.template import Template
from mako.lookup import TemplateLookup
from mako import exceptions

info_dict={}


class MyLog():
   def __init__(self):
      self.dd = time.strftime('%Y%m%d')
      self.logDir = os.getcwd()
      self.logname = "logs/serv_%s.log" % self.dd
      logging.basicConfig(level=logging.INFO,
                format='%(asctime)s %(process)d %(levelname)s %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S',
                filename=os.path.join(self.logDir,self.logname),
                filemode='a')
   
   def GetLogger(self):
      return logging.getLogger()

class MyTemplate():
   def __init__(self):
      self.lookDir = os.getcwd()
      print self.lookDir
      self.lookUp = TemplateLookup(directories=[self.lookDir])
      
   def GetLookUp(self):
      return self.lookUp
      
   def ExecTemplate(self, path, **inmsg):
      try:
         print path
         myTtt = self.lookUp.get_template(path)
         return myTtt.render(**inmsg)
      except:
         print exceptions.text_error_template().render()

class MyUtil():
   def __init__(self):
      self.myTt = MyTemplate()

   def ParseMsg(self,msg):
      if msg.startswith("CUHK-LOGIN"):
         msgType, msgValue = msg.split(":")
         return self.LogIn(msgValue)
      elif msg.startswith("CUHK-LOGOUT"):
         return self.LogOut()
      elif msg.startswith("CUHK-CLIENTLIVE"):
         return self.ClientLive()
      elif msg.startswith("CUHK-ADDACCOUNT"):
         msgType, msgValue = msg.split(":")
         return self.AddAccount(msgValue)
      else:
         return self.Default()
         
   def CheckIp(self,msg):
      return self.myTt.ExecTemplate("config/checkip.tpl.py",inmsg=msg)   
      
   def LogIn(self,msg):
      return self.myTt.ExecTemplate("config/login.tpl.py",inmsg=msg)
      
   def LogOut(self):
      return self.myTt.ExecTemplate("config/logout.tpl.py")
      
   def ClientLive(self):
      return self.myTt.ExecTemplate("config/clientlive.tpl.py")
      
   def AddAccount(self,msg):
      return self.myTt.ExecTemplate("config/addaccount.tpl.py",inmsg=msg)
      
   def Default(self):
      return self.myTt.ExecTemplate("config/default.tpl.py")



class MyTcp():
   global info_dict
   def __init__(self,port):
       self.port = port
       self.ip = self.GetHostIp()
       self.mysocket = self.InitScoket()
       self.processnum = 0
      
   def GetHostIp(self):
       hostname = socket.gethostname()
       ip = socket.gethostbyname(hostname)
       
       return ip
       
   def InitScoket(self):
       mySocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM,0)
       mySocket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
       #mySocket.settimeout(5)
       mySocket.bind((self.ip,self.port))
       mySocket.listen(10)
       
       return mySocket
       
   def RecvReq(self, sd, addr):
       sd.settimeout(300) #防止telnet,33s未收到应答断开连接
       
       myUtil = MyUtil()
       try:
          if myUtil.CheckIp(addr) == "0":
             print "111"
             print self.processnum
             self.processnum = self.processnum-1
             print self.processnum
             print sd
#             sd.close()
#             print sd
#             print "222"
#             print "221"
#             exit(0)
#             print "333"
       #except Exception,e:
       except:
          #print str(e)
          print "444"
        
       print "666" 
       
#       while True:
#           print"aaa"
#           try:
#               print "bbb"
#               reqMsg = sd.recv(1024)
#               if len(reqMsg) == 0:
#                  return
#               info_dict["CReqMsg"] = reqMsg
#               print reqMsg
#               mylog.info(reqMsg)
#               rspMsg = myUtil.ParseMsg(reqMsg)
#               
#               sd.send(rspMsg)
#               info_dict["CRspMsg"] = reqMsg
#               #登出特殊处理
#               if reqMsg.startswith("CUHK-LOGOUT"):
#                  self.processnum = self.processnum-1
#                  sd.close()
#                  return 
#           except Exception,e:
#               print sys.exc_info()
#               self.processnum = self.processnum-1
#               sd.close()
#               return 
#               
       
   def run(self):
       while True:
           cliSd, cliAddr = self.mysocket.accept()
           print cliSd
           #cliSd.close()
           
           self.processnum = self.processnum+1
           p = multiprocessing.Process(target=self.RecvReq, args=(cliSd, cliAddr,))
           print "332"
           p.start()
           print "333"
           print p
       
       #p.close()
       #p.join()
           

def Usage(errInfo):
   print(errInfo)
   sys.exit(1)

mylog = MyLog().GetLogger()

if __name__ == "__main__":

   if len(sys.argv) < 2:
      Usage("Correct Start Command : python %s port" % sys.argv[0])

   bindPort = int(sys.argv[1])
   if bindPort < 1024 or bindPort > 65535:
      Usage("You Input Port [%d] Invaild, Please Input [1024:65535]" % bindPort)

   tcpServ = MyTcp(bindPort)
   tcpServ.run()